/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuraRequest
 */
export interface AuraRequest {
    /**
     * 
     * @type {string}
     * @memberof AuraRequest
     */
    'outfit_style': AuraRequestOutfitStyleEnum;
    /**
     * 
     * @type {string}
     * @memberof AuraRequest
     */
    'gender_expression': AuraRequestGenderExpressionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuraRequest
     */
    'colorSeason': AuraRequestColorSeasonEnum;
    /**
     * 
     * @type {number}
     * @memberof AuraRequest
     */
    'num_outfits'?: number;
}

export const AuraRequestOutfitStyleEnum = {
    Casual: 'Casual',
    Ethnic: 'Ethnic',
    Formal: 'Formal',
    Home: 'Home',
    Party: 'Party',
    SmartCasual: 'Smart Casual',
    Sports: 'Sports',
    Travel: 'Travel'
} as const;

export type AuraRequestOutfitStyleEnum = typeof AuraRequestOutfitStyleEnum[keyof typeof AuraRequestOutfitStyleEnum];
export const AuraRequestGenderExpressionEnum = {
    Boys: 'Boys',
    Girls: 'Girls',
    Men: 'Men',
    Unisex: 'Unisex',
    Women: 'Women'
} as const;

export type AuraRequestGenderExpressionEnum = typeof AuraRequestGenderExpressionEnum[keyof typeof AuraRequestGenderExpressionEnum];
export const AuraRequestColorSeasonEnum = {
    Autumn: 'autumn',
    Winter: 'winter',
    Spring: 'spring',
    Summer: 'summer'
} as const;

export type AuraRequestColorSeasonEnum = typeof AuraRequestColorSeasonEnum[keyof typeof AuraRequestColorSeasonEnum];

/**
 * 
 * @export
 * @interface BodyAuraAnalyzeAuraAnalyzePost
 */
export interface BodyAuraAnalyzeAuraAnalyzePost {
    /**
     * 
     * @type {File}
     * @memberof BodyAuraAnalyzeAuraAnalyzePost
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Aura Analyze
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auraAnalyzeAuraAnalyzePost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('auraAnalyzeAuraAnalyzePost', 'file', file)
            const localVarPath = `/aura_analyze/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Outfit
         * @param {AuraRequest} auraRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOutfitGenerateOutfitPost: async (auraRequest: AuraRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auraRequest' is not null or undefined
            assertParamExists('generateOutfitGenerateOutfitPost', 'auraRequest', auraRequest)
            const localVarPath = `/generate-outfit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(auraRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Cropped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCroppedAuraAnalyzeCroppedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aura_analyze/cropped`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Item Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageItemsImageIdGet: async (imageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getItemImageItemsImageIdGet', 'imageId', imageId)
            const localVarPath = `/items/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Palette
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaletteAuraAnalyzePaletteGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aura_analyze/palette`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Redbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedboxAuraAnalyzeRedboxGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aura_analyze/redbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Aura Analyze
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auraAnalyzeAuraAnalyzePost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auraAnalyzeAuraAnalyzePost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.auraAnalyzeAuraAnalyzePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generate Outfit
         * @param {AuraRequest} auraRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateOutfitGenerateOutfitPost(auraRequest: AuraRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateOutfitGenerateOutfitPost(auraRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.generateOutfitGenerateOutfitPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Cropped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCroppedAuraAnalyzeCroppedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCroppedAuraAnalyzeCroppedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCroppedAuraAnalyzeCroppedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Item Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemImageItemsImageIdGet(imageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemImageItemsImageIdGet(imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getItemImageItemsImageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Palette
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaletteAuraAnalyzePaletteGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaletteAuraAnalyzePaletteGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPaletteAuraAnalyzePaletteGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Redbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedboxAuraAnalyzeRedboxGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedboxAuraAnalyzeRedboxGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRedboxAuraAnalyzeRedboxGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readRootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Aura Analyze
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auraAnalyzeAuraAnalyzePost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.auraAnalyzeAuraAnalyzePost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Outfit
         * @param {AuraRequest} auraRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOutfitGenerateOutfitPost(auraRequest: AuraRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.generateOutfitGenerateOutfitPost(auraRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Cropped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCroppedAuraAnalyzeCroppedGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCroppedAuraAnalyzeCroppedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Item Image
         * @param {number} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemImageItemsImageIdGet(imageId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getItemImageItemsImageIdGet(imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Palette
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaletteAuraAnalyzePaletteGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getPaletteAuraAnalyzePaletteGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Redbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedboxAuraAnalyzeRedboxGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getRedboxAuraAnalyzeRedboxGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readRootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Aura Analyze
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public auraAnalyzeAuraAnalyzePost(file: File, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).auraAnalyzeAuraAnalyzePost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Outfit
     * @param {AuraRequest} auraRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateOutfitGenerateOutfitPost(auraRequest: AuraRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).generateOutfitGenerateOutfitPost(auraRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Cropped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCroppedAuraAnalyzeCroppedGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCroppedAuraAnalyzeCroppedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Item Image
     * @param {number} imageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItemImageItemsImageIdGet(imageId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItemImageItemsImageIdGet(imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Palette
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPaletteAuraAnalyzePaletteGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPaletteAuraAnalyzePaletteGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Redbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRedboxAuraAnalyzeRedboxGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRedboxAuraAnalyzeRedboxGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



